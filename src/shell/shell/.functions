#!/usr/bin/env/bash

# source utils
. "/Users/sara/init/helpers.sh"

clone() {
  if [[ -z "$2" ]]; then
    repo=$(basename "$1" ".git")
  else
    repo=$2
  fi
  git clone "$1" "$repo"
  sleep 0.2
  printf "\n"
  print_in_purple "👉  Moving into $repo..."
  printf "\n"
  sleep 1
  cd "$repo"
  sleep 0.5
  printf "\n"
  if [ -n "$(ls package.json 2>/dev/null)" ]; then
    print_in_cyan "🛠  Installing dependencies..."
    printf "\n"
    sleep 0.5
    yarn &>/dev/null
    sleep 0.5
    printf "\n"
    if [ $? -eq 0 ]; then
      print_success "Done!"
    else
      print_error "Error: check the yarn-error.log"
    fi
  else
    exit 0
  fi
}

# list git branches all pretty
branches() {
  for branch in $(git branch | sed s/^..//); do
    time_ago=$(git log -1 --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $branch --);
    # Add emoji to mark upstream tracking
    tracks_upstream=$(if ["$(git rev-parse $branch@{upstream} 2>/dev/null)"]; then printf "✨"; fi);
    printf "%-53s - %s %s\n" $time_ago $branch $tracks_upstream;
  done | sort;
}

# use git's colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  diff() {
    git diff --no-index --color-words "$@";
  }
fi;

# undo push
revert() {
  BRANCHNAME=$1

  git push -f origin HEAD^:$1
}

# git commit browser
# requires fzf
log() {
  git log --graph --color=always \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
    --bind "ctrl-m:execute:
      echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
      xargs -I % sh -c 'git show --color=always % | less -R'"
}

# use gitignore.io cmd line tool
gi() {
    curl -L -s https://www.gitignore.io/api/$@ ;
}

# copy SSH key to clipboard
copyssh() {
  if pbcopy < ~/.ssh/id_rsa.pub ; then
    echo '🔑  → 📋  ssh key copied to clipboard!'
  else
    echo '😩  something went wrong!'
  fi
}

# make new dir and cd into it
take() {
  mkdir -p $1; cd $1;
}

# cd into whatever is in the forefront finder window
cdf() {
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

# find stuff
function f() {
  find . -name "$1" 2>&1 | grep -v '🚫  Permission denied'
}

# find stuff faster
qfind() {
  find . -exec grep -l -s $1 {} \;
  return 0
}

# search for string in dir
# find_text "my path" "string"
find_text() {
    grep -rnw "$1" -e "$2"
}

# create git.io short URL
gitio() {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage \`gitio slug url\`"
    return 1
  fi
  curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# change dir
up() {
  local cdir="$(pwd)"
  if [[ "${1}" == "" ]]; then
    cdir="$(dirname) "${cdir}")"
  elif ! [[ "${1}" =~ ^[0-9]+$ ]]; then
    echo "🛂  Arg must be a number"
  elif ! [[ "${1}" -gt "0" ]]; then
    echo "a POSITIVE number"
  else
    for i in {1..${1}}; do
      local ncdir="$(dirname "${cdir}")"
      if [[ "${cdir}" == "${ncdir}" ]]; then
        break
      else
        cdir="${ncdir}"
      fi
    done
  fi
  cd "${cdir}"
}

# see who's using the laptop camera
ispy() {
  echo "Checking to see who's using the camera.. 📸"
  usedby=$(lsof | ggrep -w "AppleCamera\|USBVDC\|iSight" | gawk '{printf $2"\n"}' | xargs ps)
  echo -e "Recent camera uses:\n$usedby"
}

# automatically list contents on `cd`
auto-ls() {
  emulate -L zsh;
  colorls -A --group-directories-first
}
chpwd_functions=( auto-ls $chpwd_functions )

# copy w progress
cp_p() {
    rsync -WavP --human-readable --progress $1 $2
}

# whois a domain or a URL
whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "🔍  Getting whois record for: $domain …"
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

# get local ip
localip(){
	function _localip(){ echo "📶  "$(ipconfig getifaddr "$1"); }
	export -f _localip
	local purple="\x1B\[35m" reset="\x1B\[m"
	networksetup -listallhardwareports | \
		sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
		sed -r "s/Device: (en.*)$/_localip \1/e" | \
		sed -r "s/Ethernet Address:/📘 /g" | \
		sed -r "s/(VLAN Configurations)|==*//g"
}

# animated gifs from any video
# https://gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
	if [[ $2 == '--good' ]]; then
	  ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
	  time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
	  rm out-static*.png
	else
	  ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
	fi
  else
	echo "✋  proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# shove it all into a black hole
nullify() {
    "$@" > /dev/null 2>&1
}

# delete files that match a certain pattern
delete-files() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# search for text within current dir
qt() {
    grep -ir --color=always "$*" --exclude-dir=".git" --exclude-dit="node_modules" . | less -RX
}

# syntax highlight JSON
json() {
    if [ -t 0 ]; then
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else
        python -mjson.tool | pygmentize -l javascript;
    fi
}

# defaulting tree
tree() {
    tree -aC -I '.git|node_modules|build|dist' --dirsfirst "$@" | less -FRNX;
}

# 🗑
emptytrash() {
    print_header "🗑  Emptying trashes..."
    sudo rm -rfv /Volumes/*/.Trashes > /dev/null
    rm -rfv ~/.Trash/* > /dev/null
    sudo rm -v /private/var/vm/sleepimage > /dev/null
    print_done
}

# update everything
run_update() {
    print_header "💅  Updating programs..."
    brew -v update > /dev/null
    brew upgrade --force-bottle --cleanup
    print_success "Homebrew updated"
    npm update -g
    print_success "Global npm packages updated"
    confirm "Update macOS apps?"
    if answer_is_yes; then
        print_header "💻  Updating macOS apps..."
        sudo softwareupdate -i -a > /dev/null
        print_done
    else
        print_done
        [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1
    fi
}
